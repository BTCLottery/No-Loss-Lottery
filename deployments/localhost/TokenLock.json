{
  "address": "0x83Ed7c0EB91e0cfCc493Fec9a0D683FAb19b07D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_unlockBegin",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockCliff",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_unlockEnd",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Claimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Locked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "claimableBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "lock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lockedAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockBegin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockCliff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockEnd",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6642e43dba2d5b6a49350ca623c52e9c9900d4cadf1be473f6c153694406bf59",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x83Ed7c0EB91e0cfCc493Fec9a0D683FAb19b07D7",
    "transactionIndex": 0,
    "gasUsed": "477627",
    "logsBloom": "0x
    "blockHash": "0xceb25baef2e7a329fed4be1846729a53451876d9fad40d9139e4ee5dd86e5f52",
    "transactionHash": "0x6642e43dba2d5b6a49350ca623c52e9c9900d4cadf1be473f6c153694406bf59",
    "logs": [],
    "blockNumber": 10676919,
    "cumulativeGasUsed": "477627",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x73172A592733dA83C58884f968805f58c48461E8",
    1654819200,
    1657411200,
    1764547200
  ],
  "numDeployments": 1,
  "solcInputHash": "c673e363a950d162cc4e095a7d22b92a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_unlockBegin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockCliff\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_unlockEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Claimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Locked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"claimableBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"lock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lockedAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockBegin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockCliff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockEnd\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Time-locks tokens according to an unlock schedule.\",\"kind\":\"dev\",\"methods\":{\"claim(address,uint256)\":{\"details\":\"Claims the caller's tokens that have been unlocked, sending them to `recipient`.\",\"params\":{\"amount\":\"The amount to transfer. If greater than the claimable amount, the maximum is transferred.\",\"recipient\":\"The account to transfer unlocked tokens to.\"}},\"claimableBalance(address)\":{\"details\":\"Returns the maximum number of tokens currently claimable by `owner`.\",\"params\":{\"owner\":\"The account to check the claimable balance of.\"},\"returns\":{\"_0\":\"The number of tokens currently claimable.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_token\":\"The token this contract will lock\",\"_unlockBegin\":\"The time at which unlocking of tokens will begin.\",\"_unlockCliff\":\"The first time at which tokens are claimable.\",\"_unlockEnd\":\"The time at which the last token will unlock.\"}},\"lock(address,uint256)\":{\"details\":\"Transfers tokens from the caller to the token lock contract and locks them for benefit of `recipient`.      Requires that the caller has authorised this contract with the token contract.\",\"params\":{\"amount\":\"The number of tokens to transfer and lock.\",\"recipient\":\"The account the tokens will be claimable by.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenLock.sol\":\"TokenLock\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, _allowances[owner][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = _allowances[owner][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Spend `amount` form the allowance of `owner` toward `spender`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xdadd41acb749920eccf40aeaa8d291adf9751399a7343561bad13e7a8d99be0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/TokenLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n/**\\n * @dev Time-locks tokens according to an unlock schedule.\\n */\\ncontract TokenLock {\\n    ERC20 public immutable token;\\n    uint256 public immutable unlockBegin;\\n    uint256 public immutable unlockCliff;\\n    uint256 public immutable unlockEnd;\\n\\n    mapping(address=>uint256) public lockedAmounts;\\n    mapping(address=>uint256) public claimedAmounts;\\n\\n    event Locked(address indexed sender, address indexed recipient, uint256 amount);\\n    event Claimed(address indexed owner, address indexed recipient, uint256 amount);\\n\\n    /**\\n     * @dev Constructor.\\n     * @param _token The token this contract will lock\\n     * @param _unlockBegin The time at which unlocking of tokens will begin.\\n     * @param _unlockCliff The first time at which tokens are claimable.\\n     * @param _unlockEnd The time at which the last token will unlock.\\n     */\\n    constructor(ERC20 _token, uint256 _unlockBegin, uint256 _unlockCliff, uint256 _unlockEnd) {\\n        require(_unlockCliff >= _unlockBegin, \\\"ERC20Locked: Unlock cliff must not be before unlock begin\\\");\\n        require(_unlockEnd >= _unlockCliff, \\\"ERC20Locked: Unlock end must not be before unlock cliff\\\");\\n        token = _token;\\n        unlockBegin = _unlockBegin;\\n        unlockCliff = _unlockCliff;\\n        unlockEnd = _unlockEnd;\\n    }\\n\\n    /**\\n     * @dev Returns the maximum number of tokens currently claimable by `owner`.\\n     * @param owner The account to check the claimable balance of.\\n     * @return The number of tokens currently claimable.\\n     */\\n    function claimableBalance(address owner) public view returns(uint256) {\\n        if(block.timestamp < unlockCliff) {\\n            return 0;\\n        }\\n\\n        uint256 locked = lockedAmounts[owner];\\n        uint256 claimed = claimedAmounts[owner];\\n        if(block.timestamp >= unlockEnd) {\\n            return locked - claimed;\\n        }\\n        return (locked * (block.timestamp - unlockBegin)) / (unlockEnd - unlockBegin) - claimed;\\n    }\\n\\n    /**\\n     * @dev Transfers tokens from the caller to the token lock contract and locks them for benefit of `recipient`.\\n     *      Requires that the caller has authorised this contract with the token contract.\\n     * @param recipient The account the tokens will be claimable by.\\n     * @param amount The number of tokens to transfer and lock.\\n     */\\n    function lock(address recipient, uint256 amount) external {\\n        require(block.timestamp < unlockEnd, \\\"TokenLock: Unlock period already complete\\\");\\n        lockedAmounts[recipient] += amount;\\n        require(token.transferFrom(msg.sender, address(this), amount), \\\"TokenLock: Transfer failed\\\");\\n        emit Locked(msg.sender, recipient, amount);\\n    }\\n\\n    /**\\n     * @dev Claims the caller's tokens that have been unlocked, sending them to `recipient`.\\n     * @param recipient The account to transfer unlocked tokens to.\\n     * @param amount The amount to transfer. If greater than the claimable amount, the maximum is transferred.\\n     */\\n    function claim(address recipient, uint256 amount) external {\\n        uint256 claimable = claimableBalance(msg.sender);\\n        if(amount > claimable) {\\n            amount = claimable;\\n        }\\n        claimedAmounts[msg.sender] += amount;\\n        require(token.transfer(recipient, amount), \\\"TokenLock: Transfer failed\\\");\\n        emit Claimed(msg.sender, recipient, amount);\\n    }\\n}\",\"keccak256\":\"0xa4c7383b49feed7dacbd8013689ee6d9a8566edb5be44817e9a40e27d29e54e3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b5060405161099d38038061099d83398101604081905261003091610145565b828210156100ab5760405162461bcd60e51b815260206004820152603960248201527f45524332304c6f636b65643a20556e6c6f636b20636c696666206d757374206e60448201527f6f74206265206265666f726520756e6c6f636b20626567696e0000000000000060648201526084015b60405180910390fd5b818110156101215760405162461bcd60e51b815260206004820152603760248201527f45524332304c6f636b65643a20556e6c6f636b20656e64206d757374206e6f7460448201527f206265206265666f726520756e6c6f636b20636c69666600000000000000000060648201526084016100a2565b60609390931b6001600160601b03191660805260a09190915260c05260e052610190565b6000806000806080858703121561015b57600080fd5b84516001600160a01b038116811461017257600080fd5b60208601516040870151606090970151919890975090945092505050565b60805160601c60a05160c05160e05161079a61020360003960008181610179015281816101dc0152818161041a015261047801526000818161011f01526103c7015260008181609d0152818161045701526104a10152600081816101a0015281816102af0152610547015261079a6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063904c66ec11610066578063904c66ec1461011a578063a8c7a08a14610141578063aad3ec9614610161578063e6e25d1014610174578063fc0c546a1461019b57600080fd5b8063239fd61114610098578063282d3fdf146100d257806360f3309b146100e757806371417b32146100fa575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e56100e0366004610692565b6101da565b005b6100bf6100f5366004610670565b6103c3565b6100bf610108366004610670565b60016020526000908152604090205481565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6100bf61014f366004610670565b60006020819052908152604090205481565b6100e561016f366004610692565b6104e4565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101c27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b7f000000000000000000000000000000000000000000000000000000000000000042106102605760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4c6f636b3a20556e6c6f636b20706572696f6420616c726561647960448201526820636f6d706c65746560b81b60648201526084015b60405180910390fd5b6001600160a01b038216600090815260208190526040812080548392906102889084906106de565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156102fb57600080fd5b505af115801561030f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033391906106bc565b61037f5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b3a205472616e73666572206661696c65640000000000006044820152606401610257565b6040518181526001600160a01b0383169033907f989eaa915cbb416ea3d6f9a63b1a3de51770c7674b11fe21ecdf76b4e1d139109060200160405180910390a35050565b60007f00000000000000000000000000000000000000000000000000000000000000004210156103f557506000919050565b6001600160a01b038216600090815260208181526040808320546001909252909120547f00000000000000000000000000000000000000000000000000000000000000004210610451576104498183610737565b949350505050565b8061049c7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610737565b6104c67f000000000000000000000000000000000000000000000000000000000000000042610737565b6104d09085610718565b6104da91906106f6565b6104499190610737565b60006104ef336103c3565b9050808211156104fd578091505b336000908152600160205260408120805484929061051c9084906106de565b909155505060405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c391906106bc565b61060f5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b3a205472616e73666572206661696c65640000000000006044820152606401610257565b6040518281526001600160a01b0384169033907ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839060200160405180910390a3505050565b80356001600160a01b038116811461066b57600080fd5b919050565b60006020828403121561068257600080fd5b61068b82610654565b9392505050565b600080604083850312156106a557600080fd5b6106ae83610654565b946020939093013593505050565b6000602082840312156106ce57600080fd5b8151801515811461068b57600080fd5b600082198211156106f1576106f161074e565b500190565b60008261071357634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156107325761073261074e565b500290565b6000828210156107495761074961074e565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220084bc5075d8f9ae56a126f570f44fc8bd3e9304221d3c24f782030193a2876b664736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063904c66ec11610066578063904c66ec1461011a578063a8c7a08a14610141578063aad3ec9614610161578063e6e25d1014610174578063fc0c546a1461019b57600080fd5b8063239fd61114610098578063282d3fdf146100d257806360f3309b146100e757806371417b32146100fa575b600080fd5b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b6100e56100e0366004610692565b6101da565b005b6100bf6100f5366004610670565b6103c3565b6100bf610108366004610670565b60016020526000908152604090205481565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6100bf61014f366004610670565b60006020819052908152604090205481565b6100e561016f366004610692565b6104e4565b6100bf7f000000000000000000000000000000000000000000000000000000000000000081565b6101c27f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020016100c9565b7f000000000000000000000000000000000000000000000000000000000000000042106102605760405162461bcd60e51b815260206004820152602960248201527f546f6b656e4c6f636b3a20556e6c6f636b20706572696f6420616c726561647960448201526820636f6d706c65746560b81b60648201526084015b60405180910390fd5b6001600160a01b038216600090815260208190526040812080548392906102889084906106de565b90915550506040516323b872dd60e01b8152336004820152306024820152604481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156102fb57600080fd5b505af115801561030f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033391906106bc565b61037f5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b3a205472616e73666572206661696c65640000000000006044820152606401610257565b6040518181526001600160a01b0383169033907f989eaa915cbb416ea3d6f9a63b1a3de51770c7674b11fe21ecdf76b4e1d139109060200160405180910390a35050565b60007f00000000000000000000000000000000000000000000000000000000000000004210156103f557506000919050565b6001600160a01b038216600090815260208181526040808320546001909252909120547f00000000000000000000000000000000000000000000000000000000000000004210610451576104498183610737565b949350505050565b8061049c7f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610737565b6104c67f000000000000000000000000000000000000000000000000000000000000000042610737565b6104d09085610718565b6104da91906106f6565b6104499190610737565b60006104ef336103c3565b9050808211156104fd578091505b336000908152600160205260408120805484929061051c9084906106de565b909155505060405163a9059cbb60e01b81526001600160a01b038481166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561058b57600080fd5b505af115801561059f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c391906106bc565b61060f5760405162461bcd60e51b815260206004820152601a60248201527f546f6b656e4c6f636b3a205472616e73666572206661696c65640000000000006044820152606401610257565b6040518281526001600160a01b0384169033907ff7a40077ff7a04c7e61f6f26fb13774259ddf1b6bce9ecf26a8276cdd39926839060200160405180910390a3505050565b80356001600160a01b038116811461066b57600080fd5b919050565b60006020828403121561068257600080fd5b61068b82610654565b9392505050565b600080604083850312156106a557600080fd5b6106ae83610654565b946020939093013593505050565b6000602082840312156106ce57600080fd5b8151801515811461068b57600080fd5b600082198211156106f1576106f161074e565b500190565b60008261071357634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156107325761073261074e565b500290565b6000828210156107495761074961074e565b500390565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220084bc5075d8f9ae56a126f570f44fc8bd3e9304221d3c24f782030193a2876b664736f6c63430008070033",
  "devdoc": {
    "details": "Time-locks tokens according to an unlock schedule.",
    "kind": "dev",
    "methods": {
      "claim(address,uint256)": {
        "details": "Claims the caller's tokens that have been unlocked, sending them to `recipient`.",
        "params": {
          "amount": "The amount to transfer. If greater than the claimable amount, the maximum is transferred.",
          "recipient": "The account to transfer unlocked tokens to."
        }
      },
      "claimableBalance(address)": {
        "details": "Returns the maximum number of tokens currently claimable by `owner`.",
        "params": {
          "owner": "The account to check the claimable balance of."
        },
        "returns": {
          "_0": "The number of tokens currently claimable."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_token": "The token this contract will lock",
          "_unlockBegin": "The time at which unlocking of tokens will begin.",
          "_unlockCliff": "The first time at which tokens are claimable.",
          "_unlockEnd": "The time at which the last token will unlock."
        }
      },
      "lock(address,uint256)": {
        "details": "Transfers tokens from the caller to the token lock contract and locks them for benefit of `recipient`.      Requires that the caller has authorised this contract with the token contract.",
        "params": {
          "amount": "The number of tokens to transfer and lock.",
          "recipient": "The account the tokens will be claimable by."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12233,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "lockedAmounts",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 12237,
        "contract": "contracts/TokenLock.sol:TokenLock",
        "label": "claimedAmounts",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}