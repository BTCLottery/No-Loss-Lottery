{
  "address": "0xE220cbb973B01B90662e7418916aE0d25c9671de",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_btclpToken",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_nllToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "btclpAmount",
          "type": "uint256"
        }
      ],
      "name": "Claim",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryRoundNr",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalTickets",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPlayers",
          "type": "uint256"
        }
      ],
      "name": "LotteryClose",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryRoundNr",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256[10]",
          "name": "winningTicketsNr",
          "type": "uint256[10]"
        },
        {
          "indexed": false,
          "internalType": "address[10]",
          "name": "winners",
          "type": "address[10]"
        }
      ],
      "name": "LotteryCompleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lotteryRoundNr",
          "type": "uint256"
        }
      ],
      "name": "LotteryOpen",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "player",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokens",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "TicketsPurchased",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumerAddress",
          "type": "address"
        }
      ],
      "name": "addConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receivingWallet",
          "type": "address"
        }
      ],
      "name": "cancelSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundNr",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimedBTCL",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "claimedBTCLP",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "randomValue",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "totalWinningTickets",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalWinners",
          "type": "uint256"
        }
      ],
      "name": "expand",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "expandedValues",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalRound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBtclpPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "ticketPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nr",
          "type": "uint256"
        }
      ],
      "name": "getClaimableTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "btclp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nll",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentBlockTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNr",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundEndRound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "time",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundNLLIgoRound",
      "outputs": [
        {
          "internalType": "bool",
          "name": "time",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRoundTimeDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundNr",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "nr",
          "type": "uint256"
        }
      ],
      "name": "getTicketNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalTickets",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "ticketNr",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundNr",
          "type": "uint256"
        }
      ],
      "name": "getWinners",
      "outputs": [
        {
          "internalType": "uint256[10]",
          "name": "luckyTicket",
          "type": "uint256[10]"
        },
        {
          "internalType": "address[10]",
          "name": "luckyWinner",
          "type": "address[10]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keyHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "link",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "onTokenTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "performData",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "consumerAddress",
          "type": "address"
        }
      ],
      "name": "removeConsumer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardBurnRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "toReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "toBurn",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isFinalRound",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "round",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "roundNr",
          "type": "uint256"
        }
      ],
      "name": "roundStats",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rounds",
      "outputs": [
        {
          "internalType": "enum BTCLPDailyNoLossLotteryTokens.Status",
          "name": "lotteryStatus",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "endDate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalUniquePlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalTickets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "topUpSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unclaimedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vrfCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawBTCLP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0722dc69ccf54e5e0ad2c45afcd9d194706d334db59cac36f2660fbb28030cfd",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xE220cbb973B01B90662e7418916aE0d25c9671de",
    "transactionIndex": 0,
    "gasUsed": "3124208",
    "logsBloom": "0x
    "blockHash": "0x1f197b9fde0eeebff7bba2a54620b26e0af188f32ae8789019524ce33f349f85",
    "transactionHash": "0x0722dc69ccf54e5e0ad2c45afcd9d194706d334db59cac36f2660fbb28030cfd",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 10676920,
        "transactionHash": "0x0722dc69ccf54e5e0ad2c45afcd9d194706d334db59cac36f2660fbb28030cfd",
        "address": "0xE220cbb973B01B90662e7418916aE0d25c9671de",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1f197b9fde0eeebff7bba2a54620b26e0af188f32ae8789019524ce33f349f85"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10676920,
        "transactionHash": "0x0722dc69ccf54e5e0ad2c45afcd9d194706d334db59cac36f2660fbb28030cfd",
        "address": "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
        "topics": [
          "0x464722b4166576d3dcbba877b999bc35cf911f4eaf434b7eba68fa113951d0bf",
          "0x00000000000000000000000000000000000000000000000000000000000010fe"
        ],
        "data": "0x000000000000000000000000e220cbb973b01b90662e7418916ae0d25c9671de",
        "logIndex": 1,
        "blockHash": "0x1f197b9fde0eeebff7bba2a54620b26e0af188f32ae8789019524ce33f349f85"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 10676920,
        "transactionHash": "0x0722dc69ccf54e5e0ad2c45afcd9d194706d334db59cac36f2660fbb28030cfd",
        "address": "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
        "topics": [
          "0x43dc749a04ac8fb825cbd514f7c0e13f13bc6f2ee66043b76629d51776cff8e0",
          "0x00000000000000000000000000000000000000000000000000000000000010fe"
        ],
        "data": "0x000000000000000000000000e220cbb973b01b90662e7418916ae0d25c9671de",
        "logIndex": 2,
        "blockHash": "0x1f197b9fde0eeebff7bba2a54620b26e0af188f32ae8789019524ce33f349f85"
      }
    ],
    "blockNumber": 10676920,
    "cumulativeGasUsed": "3124208",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x73172A592733dA83C58884f968805f58c48461E8",
    "0x580D232675F9010c3C2eA39871346780EE618dAd"
  ],
  "numDeployments": 1,
  "solcInputHash": "c673e363a950d162cc4e095a7d22b92a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_btclpToken\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_nllToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"btclpAmount\",\"type\":\"uint256\"}],\"name\":\"Claim\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryRoundNr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPlayers\",\"type\":\"uint256\"}],\"name\":\"LotteryClose\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryRoundNr\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256[10]\",\"name\":\"winningTicketsNr\",\"type\":\"uint256[10]\"},{\"indexed\":false,\"internalType\":\"address[10]\",\"name\":\"winners\",\"type\":\"address[10]\"}],\"name\":\"LotteryCompleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lotteryRoundNr\",\"type\":\"uint256\"}],\"name\":\"LotteryOpen\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokens\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"TicketsPurchased\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"}],\"name\":\"addConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receivingWallet\",\"type\":\"address\"}],\"name\":\"cancelSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNr\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedBTCL\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"claimedBTCLP\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"randomValue\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"totalWinningTickets\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalWinners\",\"type\":\"uint256\"}],\"name\":\"expand\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"expandedValues\",\"type\":\"uint256[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBtclpPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"ticketPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nr\",\"type\":\"uint256\"}],\"name\":\"getClaimableTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"btclp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nll\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentBlockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundEndRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"time\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundNLLIgoRound\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"time\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRoundTimeDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNr\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nr\",\"type\":\"uint256\"}],\"name\":\"getTicketNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"ticketNr\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNr\",\"type\":\"uint256\"}],\"name\":\"getWinners\",\"outputs\":[{\"internalType\":\"uint256[10]\",\"name\":\"luckyTicket\",\"type\":\"uint256[10]\"},{\"internalType\":\"address[10]\",\"name\":\"luckyWinner\",\"type\":\"address[10]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keyHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"link\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"onTokenTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"performData\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"consumerAddress\",\"type\":\"address\"}],\"name\":\"removeConsumer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBurnRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"toReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"toBurn\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isFinalRound\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"round\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"roundNr\",\"type\":\"uint256\"}],\"name\":\"roundStats\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rounds\",\"outputs\":[{\"internalType\":\"enum BTCLPDailyNoLossLotteryTokens.Status\",\"name\":\"lotteryStatus\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalUniquePlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"topUpSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unclaimedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vrfCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawBTCLP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"ChainLink Keepers function that checks if round draw conditions have been met and initiates draw when they are true. return bool upkeepNeeded if random winning tickets are ready to be drawn. return bytes performData contain the current encoded round number.\"},\"claim(uint256)\":{\"details\":\"Claim locked tokens + rewards from a specific round.\",\"params\":{\"roundNr\":\"Desired round number. returns claimed BTCL Tokens.\"}},\"claimAll()\":{\"details\":\"Claim locked tokens + rewards from all rounds.\",\"returns\":{\"claimedBTCLP\":\"and claimnedNLL\"}},\"expand(uint256[],uint256,uint256)\":{\"details\":\"Helper function for ChainLink VRF that extracts multiple random winning tickets from random entropy sources. return array of winning tickets.\"},\"getBtclpPrice()\":{\"custom:time\":\"every hour entry price increases by 1 BTCLP Tokens for each chance\",\"details\":\"Get 1 Ticket Price with BTCLP Tokens.\"},\"getTicketNumber(uint256,uint256)\":{\"details\":\"Helper function used to view ticket number ownership.\",\"params\":{\"nr\":\"The ticket slot numbers return totalTickets the total Number tickets purchased in the round selected return ticketNr the address of the player that owns the round ticket\",\"roundNr\":\"The round from which we want to inspect ticket slots\"}},\"getWinners(uint256)\":{\"details\":\"Get Round Winners returns luckyTickets and luckyWinners\"},\"onTokenTransfer(address,uint256,bytes)\":{\"details\":\"ERC677 TokenFallback Function.\",\"params\":{\"_data\":\"The transaction metadata.\",\"_value\":\"The amount of tokens sent by the player to the BTCLP Daily No Loss Lottery Contract.\",\"_wallet\":\"The player address that sent tokens to the BTCLP Daily No Loss Lottery Contract.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"ChainLink Keepers function that is executed by the Chainlink Keeper.\",\"params\":{\"performData\":\"encoded round number sent over from checkUpKeep\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"roundStats(uint256)\":{\"details\":\"Helper function that is used to display winner addresses, contributions and lucky bonuses won\",\"params\":{\"roundNr\":\"Desired round number.\"},\"returns\":{\"_0\":\"bool Function returns round winners statistics.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawBTCLP()\":{\"details\":\"Helper function used to withdraw remaining LINK Tokens after all Daily Games have finished.\"},\"withdrawLink()\":{\"details\":\"Helper function used to withdraw remaining LINK Tokens after all Daily Games have finished.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BTCLPDailyNoLossLotteryTokens.sol\":\"BTCLPDailyNoLossLotteryTokens\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BTCLPDailyNoLossLotteryTokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.8.0 < 0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\ncontract BTCLPDailyNoLossLotteryTokens is Context, Ownable, ReentrancyGuard, VRFConsumerBaseV2, KeeperCompatible {\\n    using SafeERC20 for IERC20;\\n    \\n    IERC20 private btclpToken; // GET TOKENS BACK AFTER THE GAME ENDS\\n    IERC20 private nllToken;   // TOKENS ARE BURNED AFTER USE\\n\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    LinkTokenInterface LINKTOKEN;\\n\\n    event LotteryOpen(uint256 lotteryRoundNr);\\n    event LotteryClose(uint256 lotteryRoundNr, uint256 totalTickets, uint256 totalPlayers);\\n    event LotteryCompleted(uint256 lotteryRoundNr, uint256[10] winningTicketsNr, address[10] winners);\\n    event TicketsPurchased(address token, address player, uint256 tokens, bytes data);\\n    event Claim(address claimer, uint256 btclpAmount);\\n\\n    enum Status {\\n        Open,           // The lottery is open for ticket purchases\\n        Closed,         // The lottery is no longer open for ticket purchases\\n        Completed       // The lottery in this round has closed and the random lucky tickets have been drawn\\n    }\\n\\n    struct Round {\\n        Status lotteryStatus;                       // Status for BTCLP Daily No Loss Lottery\\n        uint256 requestId;                          // Chainlink VRF Round Request ID\\n        uint256[] randomResult;                     // Chainlink VRF Random Result (hex number)\\n        uint256 startDate;                          // Current Round Start Time\\n        uint256 endDate;                            // Current Round End Date\\n        uint256 totalUniquePlayers;                 // Total Unique Players in active round\\n        uint256 totalTickets;                       // Total Tickets Bought in active round\\n        uint256[10] luckyTickets;                   // 10 Lucky Tickets are drawn every round (you can win multiple times with 1 ticket)\\n        address[10] winners;                        // 10 Lucky Addresses of 10 Lucky Winnings Tickets\\n        mapping (uint256 => address) ticketNr;      // Get Players Addresses from their Ticket Numbers \\n        mapping (address => uint256) totalBTCLP;    // Total BTCLP Contributed in active round\\n        mapping (address => uint256) totalNLL;      // Total NLL Contributed in active round\\n        mapping (address => bool) isUnique;         // Check if Player is Unique in current round\\n    }\\n\\n    mapping(uint => Round) public rounds;\\n\\n    // CHAINLINK BSC - VRF V2\\n    address public vrfCoordinator = 0x6168499c0cFfCaCD319c818142124B7A15E857ab; // 0x6A2AAd07396B36Fe02a22b33cf443582f682c82f; // 0x6168499c0cFfCaCD319c818142124B7A15E857ab; // Rinkeby\\n    address public link = 0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06; // 0x01BE23585060835E02B77ef475b0Cc51aA1e0709; // Rinkeby\\n    bytes32 public keyHash = 0xd4bb89654db74673a187bd804519e65e3f71a52bc55f11da7601a13dcf505314; // 0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc; // Rinkeby\\n\\n    // DAILY JACKPOT ROUND\\n    uint256 public round;\\n    uint256 public startBlock = block.number;  // 1 June 2022\\n    uint256 public unclaimedTokens;            // total BTCLP Tokens that can be claimed\\n    uint256 private blocksPerDay = 6446;       // 28700 for BSC // 6446 for Rinkeby // 43200 for MATIC\\n    uint256 private btclpEntry = 1 * 1e18;     // 1 BTCLP per Ticket that can be reclaimed at the end\\n    uint256 private nllEntry = 1 * 1e18;       // 1 NLL Token per Ticket but get's burned after use\\n    uint16 private requestConfirmations = 3;   // Min Blocks after \\n    uint32 private callbackGasLimit = 100000;  // Amount of gas used for Chainlink Keepers Network calling Chainlink VRF V2 Randomness Function\\n    uint32 private numWords = 1;               // Request 10 Random bytes32\\n    uint64 public subscriptionId;              // Chainlink Subscription ID\\n    bool public finalRound;                    // Last round \\n\\n    constructor(IERC20 _btclpToken, IERC20 _nllToken) VRFConsumerBaseV2(vrfCoordinator) {\\n        btclpToken = _btclpToken;\\n        nllToken = _nllToken;\\n        round = 1;\\n        rounds[round].lotteryStatus = Status.Open;\\n        rounds[round].startDate = block.timestamp;\\n        rounds[round].endDate = addMinutes(rounds[round].startDate, 4); // 4 minutes -> addDays(1) in Production\\n        COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(link);\\n        createNewSubscription();\\n    }\\n\\n    // Create a new subscription when the contract is initially deployed.\\n    function createNewSubscription() private onlyOwner {\\n        subscriptionId = COORDINATOR.createSubscription();\\n        COORDINATOR.addConsumer(subscriptionId, address(this));\\n    }\\n\\n    // Assumes this contract owns link. 1000000000000000000 = 1 LINK\\n    function topUpSubscription(uint256 amount) external onlyOwner {\\n        LINKTOKEN.transferAndCall(address(COORDINATOR), amount, abi.encode(subscriptionId));\\n    }\\n\\n    // Add a consumer contract to the subscription.\\n    function addConsumer(address consumerAddress) external onlyOwner {\\n        COORDINATOR.addConsumer(subscriptionId, consumerAddress);\\n    }\\n\\n    // Remove a consumer contract from the subscription.\\n    function removeConsumer(address consumerAddress) external onlyOwner {\\n        COORDINATOR.removeConsumer(subscriptionId, consumerAddress);\\n    }\\n\\n    // Cancel the subscription and send the remaining LINK to a wallet address.\\n    function cancelSubscription(address receivingWallet) external onlyOwner {\\n        COORDINATOR.cancelSubscription(subscriptionId, receivingWallet);\\n        subscriptionId = 0;\\n    }\\n\\n    // Transfer this contract's funds to an address.\\n    function withdraw(uint256 amount, address to) external onlyOwner {\\n        LINKTOKEN.transfer(to, amount);\\n    }\\n\\n    /**\\n     * @dev Get 1 Ticket Price with BTCLP Tokens.\\n     * @custom:time every hour entry price increases by 1 BTCLP Tokens for each chance\\n     */\\n    function getBtclpPrice() public view returns (uint ticketPrice) {\\n        return btclpEntry + (1 * (diffHours(rounds[round].startDate, block.timestamp) * 1e18));\\n    }\\n\\n    function addMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        uint SECONDS_PER_MINUTE = 60;\\n        newTimestamp = timestamp + _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp >= timestamp);\\n    }\\n\\n    function subMinutes(uint timestamp, uint _minutes) internal pure returns (uint newTimestamp) {\\n        uint SECONDS_PER_MINUTE = 60;\\n        newTimestamp = timestamp - _minutes * SECONDS_PER_MINUTE;\\n        require(newTimestamp <= timestamp);\\n    }\\n\\n    function diffHours(uint fromTimestamp, uint toTimestamp) internal pure returns (uint _hours) {\\n        require(fromTimestamp <= toTimestamp);\\n        uint SECONDS_PER_HOUR = 60 * 60; // 3600\\n        _hours = (toTimestamp - fromTimestamp) / SECONDS_PER_HOUR;\\n    }\\n\\n    /**\\n     * @dev Get Round Winners\\n     * returns luckyTickets and luckyWinners\\n     */\\n    function getWinners(uint roundNr) public view returns (uint256[10] memory luckyTicket, address[10] memory luckyWinner) {\\n        return (rounds[roundNr].luckyTickets, rounds[roundNr].winners);\\n    }\\n\\n    /**\\n     * @dev Claim locked tokens + rewards from a specific round.\\n     * @param roundNr Desired round number.\\n     * returns claimed BTCL Tokens.\\n     */\\n    function claim(uint roundNr) public nonReentrant returns (uint256 claimedBTCL) {\\n        require(roundNr > round, \\\"Wait until round finishes\\\");\\n        uint btclpTokens = 0;\\n        \\n        // CLAIM BTCL TOKENS AFTER IGO ENDS\\n        if(block.number >= startBlock) {\\n            if(rounds[roundNr].totalBTCLP[_msgSender()] > 0) {\\n                btclpTokens = rounds[roundNr].totalBTCLP[_msgSender()];\\n                rounds[roundNr].totalBTCLP[_msgSender()] = 0;\\n                btclpToken.safeTransfer(_msgSender(), btclpTokens);\\n                unclaimedTokens -= btclpTokens;\\n            }\\n        }\\n\\n        emit Claim(_msgSender(), btclpTokens);\\n        return btclpTokens;\\n    }\\n\\n    /**\\n     * @dev Claim locked tokens + rewards from all rounds.\\n     * @return claimedBTCLP and claimnedNLL\\n     */\\n    function claimAll() public nonReentrant returns (uint256 claimedBTCLP) {\\n        uint btclpTokens = 0;\\n        for(uint i = 1; i <= round; i++) {\\n            // CLAIM BTCLP TOKENS AFTER IGO ENDS\\n            if(block.number >= startBlock) {\\n                if (rounds[i].totalBTCLP[_msgSender()] > 0) {\\n                    uint btclp = rounds[i].totalBTCLP[_msgSender()];\\n                    rounds[i].totalBTCLP[_msgSender()] = 0;\\n                    btclpTokens += btclp;\\n                }\\n            }\\n        }\\n\\n        if(block.number >= startBlock) {\\n            btclpToken.safeTransfer(_msgSender(), btclpTokens);\\n            unclaimedTokens -= btclpTokens;\\n        }\\n        \\n\\n        emit Claim(_msgSender(), btclpTokens);\\n        return btclpTokens;\\n    }\\n\\n    /**\\n     * @dev Helper function that is used to display winner addresses, contributions and lucky bonuses won\\n     * @param roundNr Desired round number.\\n     * @return bool Function returns round winners statistics.\\n     */\\n    function roundStats(uint roundNr) view public returns (address[] memory, uint[] memory, uint[] memory) {\\n        uint playersLength = rounds[roundNr].winners.length;\\n        uint[] memory contribution = new uint[](playersLength);\\n        uint[] memory totalBtclpWon = new uint[](playersLength);\\n        address[] memory addresses = new address[](playersLength);\\n\\n        for(uint i = 0; i < playersLength; i++){\\n            addresses[i] = rounds[roundNr].winners[i];\\n            contribution[i] = rounds[roundNr].totalBTCLP[addresses[i]];\\n            totalBtclpWon[i] = rounds[roundNr].totalNLL[addresses[i]];\\n        }\\n\\n        return (addresses, contribution, totalBtclpWon);\\n    }\\n\\n    function getClaimableTokens(uint256 nr) public view returns (uint btclp, uint256 nll) {\\n        btclp = rounds[nr].totalBTCLP[_msgSender()];\\n        nll = rounds[nr].totalNLL[_msgSender()];\\n    }\\n\\n    /**\\n     * @dev Helper function for ChainLink VRF that extracts multiple random winning tickets from random entropy sources.\\n     * return array of winning tickets.\\n     */\\n    function expand(uint256[] memory randomValue, uint256 totalWinningTickets, uint256 totalWinners) public pure returns (uint256[] memory expandedValues) {\\n        expandedValues = new uint256[](totalWinners);\\n        for (uint256 i = 0; i < totalWinners; i++) {\\n            expandedValues[i] = (uint256(keccak256(abi.encode(randomValue, i))) % totalWinningTickets) + 1;\\n        }\\n        return expandedValues;\\n    }\\n\\n    /**\\n     * @dev Callback function used by VRF Coordinator to draw winners, announce and setup next round.\\n     * @param requestId VRF Coordinator request.\\n     * @param randomness VRF Coordinator random result.\\n     */\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomness) internal override {\\n        uint256[] memory winningTickets = expand(randomness, rounds[round].totalTickets, rounds[round].winners.length);\\n        (uint256 toReward, uint256 toBurn, bool isFinalRound) = rewardBurnRatio();\\n        for (uint i = 0; i < rounds[round].winners.length; i++) {\\n            address winnerAddress = rounds[round].ticketNr[winningTickets[i]];\\n            rounds[round].winners[i] = winnerAddress;\\n            rounds[round].luckyTickets[i] = winningTickets[i];\\n            rounds[round].totalBTCLP[winnerAddress] = rounds[round].totalBTCLP[winnerAddress] + toReward;\\n            unclaimedTokens += toReward;\\n        }\\n        (bool success,) = address(btclpToken).call(abi.encodeWithSignature(\\\"burn(uint256)\\\",toBurn));\\n        require(success,\\\"burn FAIL\\\");\\n\\n        rounds[round].lotteryStatus = Status.Completed;\\n        rounds[round].randomResult = randomness;\\n        rounds[round].requestId = requestId;\\n        emit LotteryCompleted(round, rounds[round].luckyTickets, rounds[round].winners);\\n\\n        if(isFinalRound) {\\n            finalRound = true;\\n        } else {\\n            // INITIATE NEXT ROUND\\n            round = round + 1;\\n            rounds[round].lotteryStatus = Status.Open;\\n            rounds[round].startDate = block.timestamp;\\n            rounds[round].endDate = addMinutes(rounds[round].startDate, 4); // addDays(1) in production\\n            emit LotteryOpen(round);\\n        }\\n\\n    }\\n\\n    function rewardBurnRatio() public view returns (uint256 toReward, uint256 toBurn, bool isFinalRound) {\\n        uint256 dailyPrize = 1111000e18; // added 1000 BTCLP for first round\\n        uint256 deflation = round * 1000e18; // 1000 BTCLP deflation deduction each day\\n        uint256 reward = dailyPrize - deflation; // initial prize minus daily deflation\\n        uint256 contractBalance = btclpToken.balanceOf(address(this)) - unclaimedTokens;\\n        if(reward * 2 <= contractBalance)  {\\n            toReward = reward / 10; \\n            toBurn = reward;\\n            isFinalRound = false;\\n        } else if (reward * 2 >= contractBalance) {\\n            toReward = contractBalance / 2 / 10;\\n            toBurn = contractBalance / 2;\\n            isFinalRound = true;\\n        }\\n    }\\n\\n    /**\\n     * @dev ChainLink Keepers function that checks if round draw conditions have been met and initiates draw when they are true.\\n     * return bool upkeepNeeded if random winning tickets are ready to be drawn.\\n     * return bytes performData contain the current encoded round number.\\n     */\\n    function checkUpkeep(bytes calldata /* checkData */) external view override returns (bool upkeepNeeded, bytes memory performData) {\\n        upkeepNeeded = \\n            subMinutes(rounds[round].endDate, 2) <= block.timestamp &&\\n            rounds[round].requestId == 0 &&\\n            rounds[round].lotteryStatus == Status.Open && \\n            rounds[round].lotteryStatus != Status.Completed && \\n            rounds[round].totalTickets >= 10;\\n        performData = abi.encode(round);\\n    }\\n\\n    /**\\n     * @dev ChainLink Keepers function that is executed by the Chainlink Keeper.\\n     * @param performData encoded round number sent over from checkUpKeep\\n     */\\n    function performUpkeep(bytes calldata performData) external override {\\n        uint256 verifyRound = abi.decode(performData, (uint256));\\n        require(verifyRound == round, \\\"Round mismatch.\\\");\\n        require(\\n            block.timestamp >= subMinutes(rounds[round].endDate, 2) && \\n            rounds[round].lotteryStatus == Status.Open && \\n            rounds[round].lotteryStatus != Status.Completed && \\n            rounds[round].totalTickets >= 10, \\n            \\\"Could not draw winnings tickets.\\\"\\n        );\\n        rounds[round].lotteryStatus == Status.Closed;\\n        emit LotteryClose(round, rounds[round].totalTickets, rounds[round].totalUniquePlayers);\\n        COORDINATOR.requestRandomWords(\\n            keyHash,\\n            subscriptionId,\\n            requestConfirmations,\\n            callbackGasLimit,\\n            numWords\\n        );\\n    }\\n\\n    /**\\n     * @dev Helper function used to view ticket number ownership.\\n     * @param roundNr The round from which we want to inspect ticket slots\\n     * @param nr The ticket slot numbers\\n     * return totalTickets the total Number tickets purchased in the round selected\\n     * return ticketNr the address of the player that owns the round ticket\\n     */\\n    function getTicketNumber(uint roundNr, uint nr) public view returns(uint totalTickets, address ticketNr) {\\n        return (rounds[roundNr].totalTickets, rounds[roundNr].ticketNr[nr]);\\n    }\\n\\n    /**\\n     * @dev Helper function used to withdraw remaining LINK Tokens after all Daily Games have finished.\\n     */\\n    function withdrawLink() external onlyOwner {\\n        require(LINKTOKEN.transfer(_msgSender(), LINKTOKEN.balanceOf(address(this))), \\\"Unable to transfer\\\");\\n    }\\n\\n    /**\\n     * @dev Helper function used to withdraw remaining LINK Tokens after all Daily Games have finished.\\n     */\\n    function withdrawBTCLP() external onlyOwner {\\n        require(btclpToken.transfer(_msgSender(), btclpToken.balanceOf(address(this))), \\\"Unable to transfer\\\");\\n    }\\n\\n    function getCurrentTime() public view returns (uint time) { time = block.timestamp; }\\n    function getCurrentBlockTime() public view returns (uint blockNr) { blockNr = block.number; }\\n    function getCurrentRoundTimeDiff() public view returns (uint time) { time = rounds[round].endDate - block.timestamp; }\\n    function getCurrentRoundEndRound() public view returns (bool time) { time = addMinutes(block.timestamp, 2) >= rounds[round].endDate; }\\n    function getCurrentRoundNLLIgoRound() public view returns (bool time) { time = block.number >= startBlock + blocksPerDay; }\\n\\n    /**\\n     * @dev ERC677 TokenFallback Function.\\n     * @param _wallet The player address that sent tokens to the BTCLP Daily No Loss Lottery Contract.\\n     * @param _value The amount of tokens sent by the player to the BTCLP Daily No Loss Lottery Contract.\\n     * @param _data  The transaction metadata.\\n     */\\n    function onTokenTransfer(address _wallet, uint256 _value, bytes memory _data) public {\\n        require(finalRound == false, \\\"The daily BTCLP No Loss Lottery has successfully distributed all 401.500.000 BTCLP Tokens!\\\");\\n        uint ticketPrice = getBtclpPrice();\\n        buyTicket(_wallet, _value, ticketPrice, round, _data);\\n    }\\n\\n    function buyTicket(address _wallet, uint256 _value, uint256 _btclpEntryPrice, uint256 _round, bytes memory _data) private {    \\n        // HIDRATE UNIQUE PLAYERS IN CURRENT ROUND\\n        if(rounds[_round].isUnique[_wallet] == false) {\\n            rounds[_round].isUnique[_wallet] = true;\\n            rounds[_round].totalUniquePlayers = rounds[_round].totalUniquePlayers + 1;\\n        }\\n        \\n        // BUY TICKET WITH BTCLP\\n        if(_msgSender() == address(btclpToken)) {\\n            require(_value % _btclpEntryPrice == 0, \\\"The Daily No Loss Lottery accepts multiple 1200 BTCLP + Hourly increases of 50 BTCLP for each chance.\\\");\\n            require(_value / _btclpEntryPrice <= 250, \\\"Max 250 Tickets can be reserved at once using BTCLP Tokens.\\\");\\n            _addTickets(_wallet, _value / _btclpEntryPrice);\\n            rounds[_round].totalBTCLP[_wallet] = rounds[_round].totalBTCLP[_wallet] + _value;\\n            unclaimedTokens += _value;\\n            emit TicketsPurchased(address(btclpToken), _wallet, _value, _data);\\n        \\n        // BUY TICKET WITH NLL\\n        } else if (_msgSender() == address(nllToken)) {\\n            require(_value % nllEntry == 0, \\\"1 NLL Token = 1 Chance at any time.\\\");\\n            require(_value / nllEntry <= 250, \\\"Max 250 Tickets can be reserved at once using NLL Tokens.\\\");\\n            _addTickets(_wallet, _value / nllEntry);\\n            rounds[_round].totalNLL[_wallet] = rounds[_round].totalNLL[_wallet] + _value;\\n            (bool success,) = address(nllToken).call(abi.encodeWithSignature(\\\"burn(uint256)\\\",_value));\\n            require(success, \\\"burn FAIL\\\");\\n            emit TicketsPurchased(address(nllToken), _wallet, _value, _data);\\n        } else {\\n            revert(\\\"Provided amounts are not valid.\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper function called by ERC677 onTokenTransfer function to \\n     * calculate ticket slots for player and keep count of total tickets bought in the current round. \\n     * @param _wallet The player address that sent tokens to the BTCLP Daily No Loss Lottery Contract.\\n     * @param _totalTickets The amount of tokens sent by the player to the BTCLP Daily No Loss Lottery Contract.\\n     */\\n    function _addTickets(address _wallet, uint _totalTickets) private {\\n        Round storage activeRound = rounds[round];\\n        uint total = activeRound.totalTickets;\\n        for(uint i = 1; i <= _totalTickets; i++){\\n            activeRound.ticketNr[total + i] = _wallet;\\n        }\\n        activeRound.totalTickets = total + _totalTickets;\\n    }\\n\\n}\",\"keccak256\":\"0xa41cc6fd04b361da71def88c492c5620c84a4062d3b03e8c7a1dbdf213dc7085\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052600780546001600160a01b0319908116736168499c0cffcacd319c818142124b7a15e857ab17909155600880549091167384b9b910527ad5c03a9ca831909e21e236ea7b061790557fd4bb89654db74673a187bd804519e65e3f71a52bc55f11da7601a13dcf50531460095543600b5561192e600d55670de0b6b3a7640000600e819055600f55601080546601000186a000036001600160501b0319909116179055348015620000b357600080fd5b506040516200334f3803806200334f833981016040819052620000d69162000419565b6007546001600160a01b0316620000ed33620001fa565b600180805560609190911b6001600160601b031916608052600280546001600160a01b03199081166001600160a01b038681169190911790925560038054909116918416919091179055600a81905560005260066020527f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a31805460ff19169055427f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a348190556200019f9060046200024a565b600a54600090815260066020526040902060049081019190915560075481546001600160a01b03199081166001600160a01b0392831617909255600854600580549093169116179055620001f26200027d565b5050620004d6565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000603c6200025a81846200049e565b62000266908562000483565b9150838210156200027657600080fd5b5092915050565b6000546001600160a01b03163314620002dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b600480546040805163288688f960e21b815290516001600160a01b039092169263a21a23e49282820192602092908290030181600087803b1580156200032157600080fd5b505af115801562000336573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200035c919062000451565b60108054600160501b600160901b0319166a01000000000000000000006001600160401b039384168102919091179182905560048054604051631cd0704360e21b815292909304909316928101929092523060248301526001600160a01b031690637341c10c90604401600060405180830381600087803b158015620003e157600080fd5b505af1158015620003f6573d6000803e3d6000fd5b50505050565b80516001600160a01b03811681146200041457600080fd5b919050565b600080604083850312156200042d57600080fd5b6200043883620003fc565b91506200044860208401620003fc565b90509250929050565b6000602082840312156200046457600080fd5b81516001600160401b03811681146200047c57600080fd5b9392505050565b60008219821115620004995762000499620004c0565b500190565b6000816000190483118215151615620004bb57620004bb620004c0565b500290565b634e487b7160e01b600052601160045260246000fd5b60805160601c612e53620004fc600039600081816107aa01526107ec0152612e536000f3fe608060405234801561001057600080fd5b50600436106102265760003560e01c8063715018a6116101305780639e13ca3a116100b8578063cb193f4f1161007c578063cb193f4f14610591578063d1058e5914610599578063d2b0e28d146105a1578063ee827c3a146105a9578063f2fde38b146105b157600080fd5b80639e13ca3a146104e0578063a3e56fa814610504578063a4c0ed3614610517578063b4f11d7a1461052a578063c394f6cb1461058857600080fd5b80638c65c81f116100ff5780638c65c81f146104365780638da5cb5b1461048f5780638dc654a2146104a057806393d81d58146104a857806395dd4b44146104bb57600080fd5b8063715018a6146103f5578063772b4499146103fd57806386850e931461041d578063898403c31461043057600080fd5b806329cb924d116101b357806348cd4cb11161018257806348cd4cb11461039957806361728f39146103a257806368fecf3a146103ab5780636b1426a4146103b35780636e04ff0d146103d457600080fd5b806329cb924d14610365578063370057151461036b578063379607f5146103735780634585e33b1461038657600080fd5b8063146ca531116101fa578063146ca5311461029d5780631c4695f4146102b45780631fe543e3146102df578063257a0c39146102f2578063259d33c11461034357600080fd5b8062f714ce1461022b57806309c1ba2e146102405780630e27e3df14610277578063112940f91461028a575b600080fd5b61023e61023936600461291d565b6105c4565b005b60105461025a90600160501b90046001600160401b031681565b6040516001600160401b0390911681526020015b60405180910390f35b61023e610285366004612742565b610682565b61023e610298366004612742565b610729565b6102a6600a5481565b60405190815260200161026e565b6008546102c7906001600160a01b031681565b6040516001600160a01b03909116815260200161026e565b61023e6102ed366004612949565b61079f565b61032e6103003660046128eb565b6000908152600660209081526040808320338452601c8101835281842054601d909101909252909120549091565b6040805192835260208301919091520161026e565b6103566103513660046128eb565b610827565b60405161026e93929190612aa1565b426102a6565b6102a6610a59565b6102a66103813660046128eb565b610aa7565b61023e61039436600461287a565b610c21565b6102a6600b5481565b6102a660095481565b61023e610eb4565b6103c66103c13660046128eb565b61102d565b60405161026e929190612b0c565b6103e76103e236600461287a565b6110c9565b60405161026e929190612ba8565b61023e6111bf565b61041061040b36600461280b565b6111f3565b60405161026e9190612b73565b61023e61042b3660046128eb565b6112be565b436102a6565b61047d6104443660046128eb565b600660208190526000918252604090912080546001820154600383015460048401546005850154949095015460ff909316949193909286565b60405161026e96959493929190612bc3565b6000546001600160a01b03166102c7565b61023e6113a1565b61023e6104b6366004612742565b61140d565b6104c36114c7565b60408051938452602084019290925215159082015260600161026e565b6010546104f490600160901b900460ff1681565b604051901515815260200161026e565b6007546102c7906001600160a01b031681565b61023e61052536600461275d565b611600565b61056b61053836600461298f565b600091825260066020818152604080852092830154938552601b90920190529091205490916001600160a01b0390911690565b604080519283526001600160a01b0390911660208301520161026e565b6102a6600c5481565b6104f46116c1565b6102a66116e8565b6102a6611834565b6104f4611854565b61023e6105bf366004612742565b61186e565b6000546001600160a01b031633146105f75760405162461bcd60e51b81526004016105ee90612c21565b60405180910390fd5b60055460405163a9059cbb60e01b81526001600160a01b038381166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b15801561064557600080fd5b505af1158015610659573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067d9190612858565b505050565b6000546001600160a01b031633146106ac5760405162461bcd60e51b81526004016105ee90612c21565b60048054601054604051639f87fad760e01b8152600160501b9091046001600160401b0316928101929092526001600160a01b0383811660248401521690639f87fad7906044015b600060405180830381600087803b15801561070e57600080fd5b505af1158015610722573d6000803e3d6000fd5b5050505050565b6000546001600160a01b031633146107535760405162461bcd60e51b81526004016105ee90612c21565b60048054601054604051631cd0704360e21b8152600160501b9091046001600160401b0316928101929092526001600160a01b0383811660248401521690637341c10c906044016106f4565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146108195760405163073e64fd60e21b81523360048201526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660248201526044016105ee565b6108238282611909565b5050565b60008181526006602090815260408051600a808252610160820190925260609384938493929083908201610140803683370190505090506000826001600160401b0381111561087857610878612e07565b6040519080825280602002602001820160405280156108a1578160200160208202803683370190505b5090506000836001600160401b038111156108be576108be612e07565b6040519080825280602002602001820160405280156108e7578160200160208202803683370190505b50905060005b84811015610a4c57600089815260066020526040902060110181600a811061091757610917612df1565b015482516001600160a01b039091169083908390811061093957610939612df1565b60200260200101906001600160a01b031690816001600160a01b031681525050600660008a8152602001908152602001600020601c01600083838151811061098357610983612df1565b60200260200101516001600160a01b03166001600160a01b03168152602001908152602001600020548482815181106109be576109be612df1565b602002602001018181525050600660008a8152602001908152602001600020601d0160008383815181106109f4576109f4612df1565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002054838281518110610a2f57610a2f612df1565b602090810291909101015280610a4481612d80565b9150506108ed565b5097919650945092505050565b600a54600090815260066020526040812060030154610a789042611d0b565b610a8a90670de0b6b3a7640000612d1e565b610a95906001612d1e565b600e54610aa29190612cf2565b905090565b600060026001541415610afc5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ee565b6002600155600a548211610b525760405162461bcd60e51b815260206004820152601960248201527f5761697420756e74696c20726f756e642066696e69736865730000000000000060448201526064016105ee565b6000600b544310610bd4576000838152600660209081526040808320338452601c0190915290205415610bd45750600082815260066020908152604080832033808552601c90910190925282208054929055610bbc905b6002546001600160a01b03169083611d3a565b80600c6000828254610bce9190612d3d565b90915550505b7f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d433604080516001600160a01b039092168252602082018490520160405180910390a16001805592915050565b6000610c2f828401846128eb565b9050600a548114610c745760405162461bcd60e51b815260206004820152600f60248201526e2937bab7321036b4b9b6b0ba31b41760891b60448201526064016105ee565b600a54600090815260066020526040902060040154610c94906002611d8c565b4210158015610cc65750600a5460009081526006602052604081205460ff166002811115610cc457610cc4612ddb565b145b8015610cf857506002600a5460009081526006602052604090205460ff166002811115610cf557610cf5612ddb565b14155b8015610d195750600a80546000908152600660208190526040909120015410155b610d655760405162461bcd60e51b815260206004820181905260248201527f436f756c64206e6f7420647261772077696e6e696e6773207469636b6574732e60448201526064016105ee565b6001600a5460009081526006602052604090205460ff166002811115610d8d57610d8d612ddb565b5050600a546000818152600660208181526040928390209182015460059092015483519485529084019190915282820152517f104524d5df9ba599f13a8032241c54d240a29d8e298b141851c7514be1c51cc89181900360600190a1600480546009546010546040516305d3b1d360e41b8152938401919091526001600160401b03600160501b820416602484015261ffff8116604484015263ffffffff6201000082048116606485015266010000000000009091041660848301526001600160a01b031690635d3b1d309060a401602060405180830381600087803b158015610e7657600080fd5b505af1158015610e8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eae9190612904565b50505050565b6000546001600160a01b03163314610ede5760405162461bcd60e51b81526004016105ee90612c21565b6002546001600160a01b031663a9059cbb336002546040516370a0823160e01b81523060048201526001600160a01b03909116906370a08231906024015b60206040518083038186803b158015610f3457600080fd5b505afa158015610f48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f6c9190612904565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610fb257600080fd5b505af1158015610fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fea9190612858565b61102b5760405162461bcd60e51b81526020600482015260126024820152712ab730b13632903a37903a3930b739b332b960711b60448201526064016105ee565b565b611035612622565b61103d612622565b60008381526006602052604090819020815161014081019283905260078201926011909201918390600a9082845b81548152602001906001019080831161106b57505060408051610140810191829052949650859350600a9250905082845b81546001600160a01b0316815260019091019060200180831161109c575050505050905091509150915091565b600a5460009081526006602052604081206004015460609042906110ee906002611d8c565b1115801561110e5750600a54600090815260066020526040902060010154155b801561113d5750600a5460009081526006602052604081205460ff16600281111561113b5761113b612ddb565b145b801561116f57506002600a5460009081526006602052604090205460ff16600281111561116c5761116c612ddb565b14155b80156111905750600a80546000908152600660208190526040909120015410155b9150600a546040516020016111a791815260200190565b60405160208183030381529060405290509250929050565b6000546001600160a01b031633146111e95760405162461bcd60e51b81526004016105ee90612c21565b61102b6000611dba565b6060816001600160401b0381111561120d5761120d612e07565b604051908082528060200260200182016040528015611236578160200160208202803683370190505b50905060005b828110156112b557838582604051602001611258929190612b86565b6040516020818303038152906040528051906020012060001c61127b9190612d9b565b611286906001612cf2565b82828151811061129857611298612df1565b6020908102919091010152806112ad81612d80565b91505061123c565b505b9392505050565b6000546001600160a01b031633146112e85760405162461bcd60e51b81526004016105ee90612c21565b60055460045460105460408051600160501b9092046001600160401b031660208301526001600160a01b0393841693634000aea09316918591016040516020818303038152906040526040518463ffffffff1660e01b815260040161134f93929190612a71565b602060405180830381600087803b15801561136957600080fd5b505af115801561137d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108239190612858565b6000546001600160a01b031633146113cb5760405162461bcd60e51b81526004016105ee90612c21565b6005546001600160a01b031663a9059cbb336005546040516370a0823160e01b81523060048201526001600160a01b03909116906370a0823190602401610f1c565b6000546001600160a01b031633146114375760405162461bcd60e51b81526004016105ee90612c21565b60048054601054604051630d7ae1d360e41b8152600160501b9091046001600160401b0316928101929092526001600160a01b038381166024840152169063d7ae1d3090604401600060405180830381600087803b15801561149857600080fd5b505af11580156114ac573d6000803e3d6000fd5b50506010805467ffffffffffffffff60501b19169055505050565b60008060008069eb436e4125b92860000090506000600a54683635c9adc5dea000006114f39190612d1e565b905060006115018284612d3d565b600c546002546040516370a0823160e01b81523060048201529293506000926001600160a01b03909116906370a082319060240160206040518083038186803b15801561154d57600080fd5b505afa158015611561573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115859190612904565b61158f9190612d3d565b90508061159d836002612d1e565b116115bb576115ad600a83612d0a565b9650819550600094506115f7565b806115c7836002612d1e565b106115f757600a6115d9600283612d0a565b6115e39190612d0a565b96506115f0600282612d0a565b9550600194505b50505050909192565b601054600160901b900460ff16156116a65760405162461bcd60e51b815260206004820152605a60248201527f546865206461696c79204254434c50204e6f204c6f7373204c6f74746572792060448201527f686173207375636365737366756c6c7920646973747269627574656420616c6c60648201527f203430312e3530302e303030204254434c5020546f6b656e7321000000000000608482015260a4016105ee565b60006116b0610a59565b9050610eae848483600a5486611e0a565b600a546000908152600660205260408120600401546116e1426002612389565b1015905090565b60006002600154141561173d5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016105ee565b600260019081556000905b600a5481116117bd57600b5443106117ab576000818152600660209081526040808320338452601c01909152902054156117ab576000818152600660209081526040808320338452601c01909152812080549190556117a78184612cf2565b9250505b806117b581612d80565b915050611748565b50600b5443106117e8576117d033610ba9565b80600c60008282546117e29190612d3d565b90915550505b7f47cee97cb7acd717b3c0aa1435d004cd5b3c8c57d70dbceb4e4458bbd60e39d433604080516001600160a01b039092168252602082018490520160405180910390a190506001805590565b600a54600090815260066020526040812060040154610aa2904290612d3d565b6000600d54600b546118669190612cf2565b431015905090565b6000546001600160a01b031633146118985760405162461bcd60e51b81526004016105ee90612c21565b6001600160a01b0381166118fd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105ee565b61190681611dba565b50565b600a8054600090815260066020819052604082200154909161192c9184916111f3565b9050600080600061193b6114c7565b92509250925060005b600a80546000526006602052811015611ad157600060066000600a548152602001908152602001600020601b01600087848151811061198557611985612df1565b6020026020010151815260200190815260200160002060009054906101000a90046001600160a01b031690508060066000600a54815260200190815260200160002060110183600a81106119db576119db612df1565b0160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550858281518110611a1257611a12612df1565b602002602001015160066000600a54815260200190815260200160002060070183600a8110611a4357611a43612df1565b0155600a5460009081526006602090815260408083206001600160a01b0385168452601c01909152902054611a79908690612cf2565b600a5460009081526006602090815260408083206001600160a01b0386168452601c01909152812091909155600c8054879290611ab7908490612cf2565b90915550829150611ac9905081612d80565b915050611944565b50600254604051602481018490526000916001600160a01b03169060440160408051601f198184030181529181526020820180516001600160e01b0316630852cd8d60e31b17905251611b249190612a18565b6000604051808303816000865af19150503d8060008114611b61576040519150601f19603f3d011682016040523d82523d6000602084013e611b66565b606091505b5050905080611ba35760405162461bcd60e51b8152602060048201526009602482015268189d5c9b881190525360ba1b60448201526064016105ee565b600a80546000908152600660209081526040808320805460ff19166002908117909155935483529091208851611be0939190910191890190612641565b50600a80546000908152600660205260408082206001018a905591548082529082902091517fb1709845312b898b2ee2b26420878140caac0d12c5debd92b46089f83bd1e33b92611c3a9291600782019160110190612c56565b60405180910390a18115611c60576010805460ff60901b1916600160901b179055611d02565b600a54611c6e906001612cf2565b600a818155600091825260066020526040808320805460ff191690558154835280832042600391820155915483529091200154611cac906004612389565b600a805460009081526006602052604090819020600401929092555490517ff4885742b80fc966577b7a9182bdcbd78d52622fef47fabbd28ceb2459ecf3e691611cf99190815260200190565b60405180910390a15b50505050505050565b600081831115611d1a57600080fd5b610e1080611d288585612d3d565b611d329190612d0a565b949350505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b17905261067d9084906123b0565b6000603c611d9a8184612d1e565b611da49085612d3d565b915083821115611db357600080fd5b5092915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008281526006602090815260408083206001600160a01b0389168452601e0190915290205460ff16611e925760008281526006602081815260408084206001600160a01b038a168552601e81018352908420805460ff191660019081179091559386905291905260050154611e7f91612cf2565b6000838152600660205260409020600501555b6002546001600160a01b0316336001600160a01b031614156120b357611eb88385612d9b565b15611f5f5760405162461bcd60e51b815260206004820152606560248201527f546865204461696c79204e6f204c6f7373204c6f74746572792061636365707460448201527f73206d756c7469706c652031323030204254434c50202b20486f75726c79206960648201527f6e63726561736573206f66203530204254434c5020666f72206561636820636860848201526430b731b29760d91b60a482015260c4016105ee565b60fa611f6b8486612d0a565b1115611fdf5760405162461bcd60e51b815260206004820152603b60248201527f4d617820323530205469636b6574732063616e2062652072657365727665642060448201527f6174206f6e6365207573696e67204254434c5020546f6b656e732e000000000060648201526084016105ee565b611ff285611fed8587612d0a565b612482565b60008281526006602090815260408083206001600160a01b0389168452601c01909152902054612023908590612cf2565b60008381526006602090815260408083206001600160a01b038a168452601c01909152812091909155600c805486929061205e908490612cf2565b90915550506002546040517f352e8720c9d6f92657a8e1c63eff306530ef7e72ddb33efa5bf5991621d10a6f916120a6916001600160a01b0390911690889088908690612a34565b60405180910390a1610722565b6003546001600160a01b0316336001600160a01b0316141561234157600f546120dc9085612d9b565b156121355760405162461bcd60e51b815260206004820152602360248201527f31204e4c4c20546f6b656e203d2031204368616e636520617420616e7920746960448201526236b29760e91b60648201526084016105ee565b60fa600f54856121459190612d0a565b11156121b95760405162461bcd60e51b815260206004820152603960248201527f4d617820323530205469636b6574732063616e2062652072657365727665642060448201527f6174206f6e6365207573696e67204e4c4c20546f6b656e732e0000000000000060648201526084016105ee565b6121cb85600f5486611fed9190612d0a565b60008281526006602090815260408083206001600160a01b0389168452601d019091529020546121fc908590612cf2565b60008381526006602090815260408083206001600160a01b038a81168552601d909101909252808320939093556003549251602481018890529192169060440160408051601f198184030181529181526020820180516001600160e01b0316630852cd8d60e31b179052516122719190612a18565b6000604051808303816000865af19150503d80600081146122ae576040519150601f19603f3d011682016040523d82523d6000602084013e6122b3565b606091505b50509050806122f05760405162461bcd60e51b8152602060048201526009602482015268189d5c9b881190525360ba1b60448201526064016105ee565b6003546040517f352e8720c9d6f92657a8e1c63eff306530ef7e72ddb33efa5bf5991621d10a6f91612333916001600160a01b0390911690899089908790612a34565b60405180910390a150610722565b60405162461bcd60e51b815260206004820152601f60248201527f50726f766964656420616d6f756e747320617265206e6f742076616c69642e0060448201526064016105ee565b6000603c6123978184612d1e565b6123a19085612cf2565b915083821015611db357600080fd5b6000612405826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661250e9092919063ffffffff16565b80519091501561067d57808060200190518101906124239190612858565b61067d5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105ee565b600a5460009081526006602081905260409091209081015460015b8381116124f55784601b840160006124b58486612cf2565b8152602081019190915260400160002080546001600160a01b0319166001600160a01b0392909216919091179055806124ed81612d80565b91505061249d565b506125008382612cf2565b826006018190555050505050565b6060611d328484600085856001600160a01b0385163b6125705760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105ee565b600080866001600160a01b0316858760405161258c9190612a18565b60006040518083038185875af1925050503d80600081146125c9576040519150601f19603f3d011682016040523d82523d6000602084013e6125ce565b606091505b50915091506125de8282866125e9565b979650505050505050565b606083156125f85750816112b7565b8251156126085782518084602001fd5b8160405162461bcd60e51b81526004016105ee9190612c0e565b604051806101400160405280600a906020820280368337509192915050565b82805482825590600052602060002090810192821561267c579160200282015b8281111561267c578251825591602001919060010190612661565b5061268892915061268c565b5090565b5b80821115612688576000815560010161268d565b80356001600160a01b03811681146126b857600080fd5b919050565b600082601f8301126126ce57600080fd5b813560206001600160401b038211156126e9576126e9612e07565b8160051b6126f8828201612cc2565b83815282810190868401838801850189101561271357600080fd5b600093505b85841015612736578035835260019390930192918401918401612718565b50979650505050505050565b60006020828403121561275457600080fd5b6112b7826126a1565b60008060006060848603121561277257600080fd5b61277b846126a1565b9250602080850135925060408501356001600160401b038082111561279f57600080fd5b818701915087601f8301126127b357600080fd5b8135818111156127c5576127c5612e07565b6127d7601f8201601f19168501612cc2565b915080825288848285010111156127ed57600080fd5b80848401858401376000848284010152508093505050509250925092565b60008060006060848603121561282057600080fd5b83356001600160401b0381111561283657600080fd5b612842868287016126bd565b9660208601359650604090950135949350505050565b60006020828403121561286a57600080fd5b815180151581146112b757600080fd5b6000806020838503121561288d57600080fd5b82356001600160401b03808211156128a457600080fd5b818501915085601f8301126128b857600080fd5b8135818111156128c757600080fd5b8660208285010111156128d957600080fd5b60209290920196919550909350505050565b6000602082840312156128fd57600080fd5b5035919050565b60006020828403121561291657600080fd5b5051919050565b6000806040838503121561293057600080fd5b82359150612940602084016126a1565b90509250929050565b6000806040838503121561295c57600080fd5b8235915060208301356001600160401b0381111561297957600080fd5b612985858286016126bd565b9150509250929050565b600080604083850312156129a257600080fd5b50508035926020909101359150565b600081518084526020808501945080840160005b838110156129e1578151875295820195908201906001016129c5565b509495945050505050565b60008151808452612a04816020860160208601612d54565b601f01601f19169290920160200192915050565b60008251612a2a818460208701612d54565b9190910192915050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612a67908301846129ec565b9695505050505050565b60018060a01b0384168152826020820152606060408201526000612a9860608301846129ec565b95945050505050565b606080825284519082018190526000906020906080840190828801845b82811015612ae35781516001600160a01b031684529284019290840190600101612abe565b50505083810382850152612af781876129b1565b9150508281036040840152612a6781856129b1565b6102808101818460005b600a811015612b35578151835260209283019290910190600101612b16565b50505061014082018360005b600a811015612b695781516001600160a01b0316835260209283019290910190600101612b41565b5050509392505050565b6020815260006112b760208301846129b1565b604081526000612b9960408301856129b1565b90508260208301529392505050565b8215158152604060208201526000611d3260408301846129ec565b60c0810160038810612be557634e487b7160e01b600052602160045260246000fd5b968152602081019590955260408501939093526060840191909152608083015260a09091015290565b6020815260006112b760208301846129ec565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b8381526102a0810160208083018560005b600a811015612c8457815483529183019160019182019101612c67565b50505061016083018460005b600a811015612cb65781546001600160a01b031683529183019160019182019101612c90565b50505050949350505050565b604051601f8201601f191681016001600160401b0381118282101715612cea57612cea612e07565b604052919050565b60008219821115612d0557612d05612daf565b500190565b600082612d1957612d19612dc5565b500490565b6000816000190483118215151615612d3857612d38612daf565b500290565b600082821015612d4f57612d4f612daf565b500390565b60005b83811015612d6f578181015183820152602001612d57565b83811115610eae5750506000910152565b6000600019821415612d9457612d94612daf565b5060010190565b600082612daa57612daa612dc5565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220e0ef46747ba7084a69a760f21ca3ddc0643ec3f6853778ab150cf7154840d54c64736f6c63430008070033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "ChainLink Keepers function that checks if round draw conditions have been met and initiates draw when they are true. return bool upkeepNeeded if random winning tickets are ready to be drawn. return bytes performData contain the current encoded round number."
      },
      "claim(uint256)": {
        "details": "Claim locked tokens + rewards from a specific round.",
        "params": {
          "roundNr": "Desired round number. returns claimed BTCL Tokens."
        }
      },
      "claimAll()": {
        "details": "Claim locked tokens + rewards from all rounds.",
        "returns": {
          "claimedBTCLP": "and claimnedNLL"
        }
      },
      "expand(uint256[],uint256,uint256)": {
        "details": "Helper function for ChainLink VRF that extracts multiple random winning tickets from random entropy sources. return array of winning tickets."
      },
      "getBtclpPrice()": {
        "custom:time": "every hour entry price increases by 1 BTCLP Tokens for each chance",
        "details": "Get 1 Ticket Price with BTCLP Tokens."
      },
      "getTicketNumber(uint256,uint256)": {
        "details": "Helper function used to view ticket number ownership.",
        "params": {
          "nr": "The ticket slot numbers return totalTickets the total Number tickets purchased in the round selected return ticketNr the address of the player that owns the round ticket",
          "roundNr": "The round from which we want to inspect ticket slots"
        }
      },
      "getWinners(uint256)": {
        "details": "Get Round Winners returns luckyTickets and luckyWinners"
      },
      "onTokenTransfer(address,uint256,bytes)": {
        "details": "ERC677 TokenFallback Function.",
        "params": {
          "_data": "The transaction metadata.",
          "_value": "The amount of tokens sent by the player to the BTCLP Daily No Loss Lottery Contract.",
          "_wallet": "The player address that sent tokens to the BTCLP Daily No Loss Lottery Contract."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "ChainLink Keepers function that is executed by the Chainlink Keeper.",
        "params": {
          "performData": "encoded round number sent over from checkUpKeep"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "roundStats(uint256)": {
        "details": "Helper function that is used to display winner addresses, contributions and lucky bonuses won",
        "params": {
          "roundNr": "Desired round number."
        },
        "returns": {
          "_0": "bool Function returns round winners statistics."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawBTCLP()": {
        "details": "Helper function used to withdraw remaining LINK Tokens after all Daily Games have finished."
      },
      "withdrawLink()": {
        "details": "Helper function used to withdraw remaining LINK Tokens after all Daily Games have finished."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 689,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3712,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 9711,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "btclpToken",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IERC20)4407"
      },
      {
        "astId": 9714,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "nllToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC20)4407"
      },
      {
        "astId": 9717,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(VRFCoordinatorV2Interface)299"
      },
      {
        "astId": 9720,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "LINKTOKEN",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(LinkTokenInterface)210"
      },
      {
        "astId": 9810,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "rounds",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_struct(Round)9805_storage)"
      },
      {
        "astId": 9813,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "vrfCoordinator",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 9816,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "link",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 9819,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "keyHash",
        "offset": 0,
        "slot": "9",
        "type": "t_bytes32"
      },
      {
        "astId": 9821,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "round",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 9825,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "startBlock",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 9827,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "unclaimedTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 9830,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "blocksPerDay",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 9835,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "btclpEntry",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 9840,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "nllEntry",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 9843,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "requestConfirmations",
        "offset": 0,
        "slot": "16",
        "type": "t_uint16"
      },
      {
        "astId": 9846,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "callbackGasLimit",
        "offset": 2,
        "slot": "16",
        "type": "t_uint32"
      },
      {
        "astId": 9849,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "numWords",
        "offset": 6,
        "slot": "16",
        "type": "t_uint32"
      },
      {
        "astId": 9851,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "subscriptionId",
        "offset": 10,
        "slot": "16",
        "type": "t_uint64"
      },
      {
        "astId": 9853,
        "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
        "label": "finalRound",
        "offset": 18,
        "slot": "16",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)10_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)10_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[10]",
        "numberOfBytes": "320"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)4407": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)210": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)299": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_enum(Status)9764": {
        "encoding": "inplace",
        "label": "enum BTCLPDailyNoLossLotteryTokens.Status",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Round)9805_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BTCLPDailyNoLossLotteryTokens.Round)",
        "numberOfBytes": "32",
        "value": "t_struct(Round)9805_storage"
      },
      "t_struct(Round)9805_storage": {
        "encoding": "inplace",
        "label": "struct BTCLPDailyNoLossLotteryTokens.Round",
        "members": [
          {
            "astId": 9767,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "lotteryStatus",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Status)9764"
          },
          {
            "astId": 9769,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "requestId",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9772,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "randomResult",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9774,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "startDate",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 9776,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "endDate",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 9778,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "totalUniquePlayers",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 9780,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "totalTickets",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 9784,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "luckyTickets",
            "offset": 0,
            "slot": "7",
            "type": "t_array(t_uint256)10_storage"
          },
          {
            "astId": 9788,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "winners",
            "offset": 0,
            "slot": "17",
            "type": "t_array(t_address)10_storage"
          },
          {
            "astId": 9792,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "ticketNr",
            "offset": 0,
            "slot": "27",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 9796,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "totalBTCLP",
            "offset": 0,
            "slot": "28",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9800,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "totalNLL",
            "offset": 0,
            "slot": "29",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 9804,
            "contract": "contracts/BTCLPDailyNoLossLotteryTokens.sol:BTCLPDailyNoLossLotteryTokens",
            "label": "isUnique",
            "offset": 0,
            "slot": "30",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "992"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}